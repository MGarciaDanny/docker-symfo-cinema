security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
    #bcrypt? or auto?
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'bcrypt'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    enable_authenticator_manager: true
    
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    
    firewalls:
        dev:
            pattern: ^/_(profiler|wdt)
            security: false
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            jwt: ~
        main:
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: auth
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            jwt: ~

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/$, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI
        - { path: ^/docs, roles: PUBLIC_ACCESS } # Allows accessing the Swagger UI docs
        - { path: ^/auth, roles: PUBLIC_ACCESS }

        # API RESTRICTIONS
        - { path: ^/api, methods: [POST, PUT, PATCH, DELETE], roles: IS_AUTHENTICATED_FULLY }

        # API PUBLIC
        - { path: ^/api, methods: [GET], roles: PUBLIC_ACCESS }


when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: bcrypt
                cost: 4 # Lowest possible value for bcrypt
                # time_cost: 3 # Lowest possible value for argon
                # memory_cost: 10 # Lowest possible value for argon
